========================== bash cell | hello-compose ===========================

# Create a Dockerfile that trivially extends the standard hello-world image.
DOCKER_FILE=products/image/Dockerfile
mkdir -p products/image
cat > ${DOCKER_FILE} << END_FILE
FROM hello-world:latest
END_FILE

# Create a compose file that builds and runs an image derived from the
# standard hello-world image.
COMPOSE_FILE=products/compose.yml
cat > ${COMPOSE_FILE} << END_FILE
services:
  hello:
    build: ./products/image
END_FILE

# Run the image derived from hello-world using docker-compose.
sudo docker-compose --no-ansi --file ${COMPOSE_FILE} up

--------------------------------- cell outputs ---------------------------------
Attaching to products-hello-1
products-hello-1  | 
products-hello-1  | Hello from Docker!
products-hello-1  | This message shows that your installation appears to be working correctly.
products-hello-1  | 
products-hello-1  | To generate this message, Docker took the following steps:
products-hello-1  |  1. The Docker client contacted the Docker daemon.
products-hello-1  |  2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
products-hello-1  |     (amd64)
products-hello-1  |  3. The Docker daemon created a new container from that image which runs the
products-hello-1  |     executable that produces the output you are currently reading.
products-hello-1  |  4. The Docker daemon streamed that output to the Docker client, which sent it
products-hello-1  |     to your terminal.
products-hello-1  | 
products-hello-1  | To try something more ambitious, you can run an Ubuntu container with:
products-hello-1  |  $ docker run -it ubuntu bash
products-hello-1  | 
products-hello-1  | Share images, automate workflows, and more with a free Docker ID:
products-hello-1  |  https://hub.docker.com/
products-hello-1  | 
products-hello-1  | For more examples and ideas, visit:
products-hello-1  |  https://docs.docker.com/get-started/
products-hello-1  | 
products-hello-1 exited with code 0
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


